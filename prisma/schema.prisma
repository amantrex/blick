// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- Enums ----------

enum UserRole {
  ADMIN
  STAFF
}

enum ChannelProvider {
  GUPSHUP
  TWILIO
  META
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  SENT
  CANCELLED
}

enum MessageStatus {
  QUEUED
  SENT
  DELIVERED
  READ
  FAILED
}

enum PaymentStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// ---------- Core Multi-tenant Models ----------

model Tenant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  contacts  Contact[]
  templates Template[]
  campaigns Campaign[]
  payments  Payment[]
  imports   ImportJob[]
  messages  Message[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  role          UserRole  @default(STAFF)
  tenantId      String
  tenant        Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  campaigns  Campaign[]  @relation("CampaignCreatedBy")
  importJobs ImportJob[]
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business models
model Contact {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name      String
  phone     String
  email     String?
  tags      String[]
  meta      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]
  payments Payment[]

  @@unique([tenantId, phone])
}

model Template {
  id                 String          @id @default(cuid())
  tenantId           String
  tenant             Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name               String
  channelProvider    ChannelProvider
  content            String          @db.Text
  variables          String[]
  providerTemplateId String?
  isApproved         Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  campaigns Campaign[]

  @@unique([tenantId, name])
}

model Campaign {
  id          String         @id @default(cuid())
  tenantId    String
  tenant      Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  name        String
  templateId  String
  template    Template       @relation(fields: [templateId], references: [id], onDelete: Cascade)
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  createdById String?
  createdBy   User?          @relation("CampaignCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  messages Message[]

  @@index([tenantId, status])
}

model Message {
  id                String        @id @default(cuid())
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaignId        String?
  campaign          Campaign?     @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  contactId         String?
  contact           Contact?      @relation(fields: [contactId], references: [id], onDelete: SetNull)
  status            MessageStatus @default(QUEUED)
  providerMessageId String?
  error             String?
  sentAt            DateTime?
  deliveredAt       DateTime?
  readAt            DateTime?
  createdAt         DateTime      @default(now())

  paymentId String?
  payment   Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

  @@index([tenantId, status])
}

model Payment {
  id                String        @id @default(cuid())
  tenantId          String
  tenant            Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  contactId         String?
  contact           Contact?      @relation(fields: [contactId], references: [id], onDelete: SetNull)
  amount            Int
  currency          String        @default("INR")
  status            PaymentStatus @default(CREATED)
  razorpayOrderId   String?
  razorpayPaymentId String?
  razorpaySignature String?
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  messages Message[]

  @@index([tenantId, status])
}

model ImportJob {
  id          String       @id @default(cuid())
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: SetNull)
  type        String
  status      ImportStatus @default(PENDING)
  rowCount    Int?
  error       String?
  createdAt   DateTime     @default(now())
  startedAt   DateTime?
  completedAt DateTime?
}

model WebhookEvent {
  id         String          @id @default(cuid())
  provider   ChannelProvider
  eventType  String
  payload    Json
  receivedAt DateTime        @default(now())
}
